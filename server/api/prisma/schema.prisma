// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @seed="ts-node prisma/seed.ts"

// User model for authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique @db.Citext
  recoveryEmail String? @db.Citext // Recovery email for account recovery
  password    String
  name        String?
  isVerified  Boolean  @default(false)
  twoFactorEnabled Boolean @default(false)
  preferences Json?    // UI settings and preferences
  notificationPreferences Json? // Notification preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  oneTimeTokens OneTimeToken[]
  refreshSessions RefreshSession[]
  twoFactorSecret TwoFactorSecret?
  backupCodes BackupCode[]
  recoveryStaging RecoveryStaging?
  pendingEmailChanges PendingEmailChange[]
  userSessions UserSession[]
  notifications Notification[]
  loyaltyAccounts LoyaltyAccount[]

  @@map("users")
}

// One-time tokens for various purposes (email verification, password reset, etc.)
model OneTimeToken {
  id        String   @id @default(cuid())
  purpose   String   // email_verification, password_reset, etc.
  hash      String   @unique // hashed token
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("one_time_tokens")
  @@index([purpose, hash])
  @@index([expiresAt])
}

// Refresh sessions for JWT refresh tokens
model RefreshSession {
  id           String   @id @default(cuid())
  familyId     String   // for token family rotation
  tokenId      String   @unique // unique refresh token ID
  refreshHash  String   // hashed refresh token
  userId       String
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_sessions")
  @@index([familyId])
  @@index([expiresAt])
  @@index([isActive])
}

// Two-factor authentication secret
model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String   // encrypted TOTP secret
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_secrets")
}

// Backup codes for 2FA recovery
model BackupCode {
  id        String   @id @default(cuid())
  userId    String
  codeHash  String   // hashed backup code
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("backup_codes")
  @@index([userId, isUsed])
}

// Recovery staging for account recovery via recovery email
model RecoveryStaging {
  id            String   @id @default(cuid())
  userId        String   @unique
  newEmail      String   @db.Citext // New email being staged
  recoveryTokenHash String // Hashed recovery token
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recovery_staging")
  @@index([expiresAt])
}

// Pending email changes
model PendingEmailChange {
  id            String   @id @default(cuid())
  userId        String
  newEmail      String   @db.Citext // New email being staged
  changeTokenHash String // Hashed change token
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_email_changes")
  @@index([expiresAt])
  @@index([changeTokenHash])
}

// User sessions for device tracking and management
model UserSession {
  id              String   @id @default(cuid())
  userId          String
  refreshTokenId  String   @unique // Links to RefreshSession.tokenId
  deviceFingerprint String? // Device fingerprint hash
  userAgent       String?  // User agent string
  ipAddress       String?  // IP address
  location        String?  // Geographic location (city, country)
  deviceType      String?  // mobile, desktop, tablet
  browser         String?  // Browser name and version
  os              String?  // Operating system
  isCurrent       Boolean  @default(false) // Is this the current active session
  lastActiveAt    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([userId, isCurrent])
  @@index([userId, lastActiveAt])
  @@index([refreshTokenId])
}

// User notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // security_alert, account_update, system_message, etc.
  title       String
  message     String
  isRead      Boolean  @default(false)
  readAt      DateTime?
  metadata    Json?    // Additional data for the notification
  priority    String   @default("normal") // low, normal, high, urgent
  expiresAt   DateTime? // Optional expiration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId, isRead, createdAt])
  @@index([userId, type, createdAt])
  @@index([expiresAt])
}

// Loyalty tier definitions
model LoyaltyTier {
  id          String   @id @default(cuid())
  name        String   @unique // Bronze, Silver, Gold, Platinum, Diamond
  minPoints   Int      @unique // Minimum points required for this tier
  maxPoints   Int?     // Maximum points for this tier (null for highest tier)
  benefits    Json?    // Tier benefits as JSON
  color       String?  // Hex color for UI representation
  icon        String?  // Icon identifier for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  loyaltyAccounts LoyaltyAccount[]

  @@map("loyalty_tiers")
  @@index([minPoints])
}

// User loyalty account
model LoyaltyAccount {
  id          String   @id @default(cuid())
  userId      String   @unique
  currentTierId String
  currentPoints Int    @default(0)
  lifetimePoints Int   @default(0) // Total points ever earned
  tierUpgradedAt DateTime? // When user last upgraded tier
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentTier LoyaltyTier @relation(fields: [currentTierId], references: [id])
  transactions LoyaltyTransaction[]

  @@map("loyalty_accounts")
  @@index([currentPoints])
  @@index([currentTierId])
}

// Loyalty transactions (read-only for this phase)
model LoyaltyTransaction {
  id          String   @id @default(cuid())
  loyaltyAccountId String
  type        String   // earn, spend, expire, adjustment
  points      Int      // Positive for earn, negative for spend
  description String
  metadata    Json?    // Additional transaction details
  orderId     String?  // Future reference to order service
  expiresAt   DateTime? // When points expire (null for permanent)
  createdAt   DateTime @default(now())

  // Relations
  loyaltyAccount LoyaltyAccount @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)

  @@map("loyalty_transactions")
  @@index([loyaltyAccountId, createdAt])
  @@index([type, createdAt])
  @@index([expiresAt])
}
