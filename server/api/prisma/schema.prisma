// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @seed="ts-node prisma/seed.ts"

// User model for authentication
model User {
  id          String   @id @default(cuid())
  email       String   @unique @db.Citext
  recoveryEmail String? @db.Citext // Recovery email for account recovery
  password    String
  name        String?
  isVerified  Boolean  @default(false)
  twoFactorEnabled Boolean @default(false)
  preferences Json?    // UI settings and preferences
  notificationPreferences Json? // Notification preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  oneTimeTokens OneTimeToken[]
  refreshSessions RefreshSession[]
  twoFactorSecret TwoFactorSecret?
  backupCodes BackupCode[]
  recoveryStaging RecoveryStaging?
  pendingEmailChanges PendingEmailChange[]

  @@map("users")
}

// One-time tokens for various purposes (email verification, password reset, etc.)
model OneTimeToken {
  id        String   @id @default(cuid())
  purpose   String   // email_verification, password_reset, etc.
  hash      String   @unique // hashed token
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("one_time_tokens")
  @@index([purpose, hash])
  @@index([expiresAt])
}

// Refresh sessions for JWT refresh tokens
model RefreshSession {
  id           String   @id @default(cuid())
  familyId     String   // for token family rotation
  tokenId      String   @unique // unique refresh token ID
  refreshHash  String   // hashed refresh token
  userId       String
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_sessions")
  @@index([familyId])
  @@index([expiresAt])
  @@index([isActive])
}

// Two-factor authentication secret
model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String   // encrypted TOTP secret
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_secrets")
}

// Backup codes for 2FA recovery
model BackupCode {
  id        String   @id @default(cuid())
  userId    String
  codeHash  String   // hashed backup code
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("backup_codes")
  @@index([userId, isUsed])
}

// Recovery staging for account recovery via recovery email
model RecoveryStaging {
  id            String   @id @default(cuid())
  userId        String   @unique
  newEmail      String   @db.Citext // New email being staged
  recoveryTokenHash String // Hashed recovery token
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recovery_staging")
  @@index([expiresAt])
}

// Pending email changes
model PendingEmailChange {
  id            String   @id @default(cuid())
  userId        String
  newEmail      String   @db.Citext // New email being staged
  changeTokenHash String // Hashed change token
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_email_changes")
  @@index([expiresAt])
  @@index([changeTokenHash])
}
