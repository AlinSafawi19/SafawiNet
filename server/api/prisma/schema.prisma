generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique @db.Citext
  password                String
  name                    String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  isVerified              Boolean              @default(false)
  twoFactorEnabled        Boolean              @default(false)
  recoveryEmail           String?              @db.Citext
  notificationPreferences Json?
  preferences             Json?
  roles                   Role[]               @default([CUSTOMER])
  backupCodes             BackupCode[]
  loyaltyAccounts         LoyaltyAccount?
  notifications           Notification[]
  oneTimeTokens           OneTimeToken[]
  pendingEmailChanges     PendingEmailChange[]
  recoveryStaging         RecoveryStaging?
  refreshSessions         RefreshSession[]
  twoFactorSecret         TwoFactorSecret?
  userSessions            UserSession[]
  productReviews          ProductReview[]
  wishlistItems           WishlistItem[]
  moderatedReviews        ProductReview[] @relation("ReviewModeration")
  carts                   Cart[]

  @@map("users")
}

model OneTimeToken {
  id        String    @id @default(cuid())
  purpose   String
  hash      String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([purpose, hash])
  @@index([expiresAt])
  @@map("one_time_tokens")
}

model RefreshSession {
  id          String   @id @default(cuid())
  familyId    String
  tokenId     String   @unique
  refreshHash String
  userId      String
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("refresh_sessions")
}

model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_secrets")
}

model BackupCode {
  id        String    @id @default(cuid())
  userId    String
  codeHash  String
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isUsed])
  @@map("backup_codes")
}

model RecoveryStaging {
  id                String   @id @default(cuid())
  userId            String   @unique
  newEmail          String   @db.Citext
  recoveryTokenHash String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("recovery_staging")
}

model PendingEmailChange {
  id              String   @id @default(cuid())
  userId          String
  newEmail        String   @db.Citext
  changeTokenHash String
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([changeTokenHash])
  @@map("pending_email_changes")
}

model UserSession {
  id                String   @id @default(cuid())
  userId            String
  refreshTokenId    String   @unique
  deviceFingerprint String?
  userAgent         String?
  ipAddress         String?
  location          String?
  deviceType        String?
  browser           String?
  os                String?
  isCurrent         Boolean  @default(false)
  lastActiveAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isCurrent])
  @@index([userId, lastActiveAt])
  @@index([refreshTokenId])
  @@map("user_sessions")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  priority  String    @default("normal")
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([userId, type, createdAt])
  @@index([expiresAt])
  @@map("notifications")
}

model LoyaltyTier {
  id              String           @id @default(cuid())
  name            String           @unique
  minPoints       Int              @unique
  maxPoints       Int?
  benefits        Json?
  color           String?
  icon            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  loyaltyAccounts LoyaltyAccount[]

  @@index([minPoints])
  @@map("loyalty_tiers")
}

model LoyaltyAccount {
  id             String               @id @default(cuid())
  userId         String               @unique
  currentTierId  String
  currentPoints  Int                  @default(0)
  lifetimePoints Int                  @default(0)
  tierUpgradedAt DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  currentTier    LoyaltyTier          @relation(fields: [currentTierId], references: [id])
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   LoyaltyTransaction[]

  @@index([currentPoints])
  @@index([currentTierId])
  @@map("loyalty_accounts")
}

model LoyaltyTransaction {
  id               String         @id @default(cuid())
  loyaltyAccountId String
  type             String
  points           Int
  description      String
  metadata         Json?
  orderId          String?
  expiresAt        DateTime?
  createdAt        DateTime       @default(now())
  loyaltyAccount   LoyaltyAccount @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)

  @@index([loyaltyAccountId, createdAt])
  @@index([type, createdAt])
  @@index([expiresAt])
  @@map("loyalty_transactions")
}

model EmailLog {
  id        String   @id @default(cuid())
  email     String   @db.Citext
  type      String
  status    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([email, createdAt])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@map("email_logs")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique @db.Citext
  description String?
  parentId    String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([parentId])
  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique @db.Citext
  description String?
  categoryId  String
  isActive    Boolean          @default(true)
  sortOrder   Int              @default(0)
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  media       ProductMedia[]
  variants    ProductVariant[]
  category    Category         @relation(fields: [categoryId], references: [id])
  reviews     ProductReview[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([slug])
  @@index([isActive])
  @@map("products")
}

model ProductVariant {
  id          String               @id @default(cuid())
  productId   String
  sku         String               @unique
  name        String
  description String?
  weight      Float?
  dimensions  Json?
  isActive    Boolean              @default(true)
  sortOrder   Int                  @default(0)
  metadata    Json?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  costs       Cost[]
  prices      Price[]
  media       ProductMedia[]
  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  taxMappings TaxCategoryMapping[]
  cartItems   CartItem[]

  @@index([productId])
  @@index([sku])
  @@index([isActive])
  @@map("product_variants")
}

model ProductMedia {
  id        String          @id @default(cuid())
  productId String
  variantId String?
  url       String
  altText   String?
  type      String          @default("image")
  sortOrder Int             @default(0)
  isActive  Boolean         @default(true)
  metadata  Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([isActive])
  @@map("product_media")
}

model ChartOfAccount {
  id          String               @id @default(cuid())
  code        String               @unique
  name        String
  type        String
  parentId    String?
  isActive    Boolean              @default(true)
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  parent      ChartOfAccount?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    ChartOfAccount[]     @relation("AccountHierarchy")
  taxMappings TaxCategoryMapping[]

  @@index([parentId])
  @@index([code])
  @@index([type])
  @@index([isActive])
  @@map("chart_of_accounts")
}

model TaxCategory {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  mappings    TaxCategoryMapping[]
  rates       TaxRate[]

  @@index([isActive])
  @@map("tax_categories")
}

model TaxRate {
  id            String      @id @default(cuid())
  taxCategoryId String
  rate          Float
  effectiveFrom DateTime    @default(now())
  effectiveTo   DateTime?
  isActive      Boolean     @default(true)
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  taxCategory   TaxCategory @relation(fields: [taxCategoryId], references: [id])

  @@index([taxCategoryId])
  @@index([effectiveFrom, effectiveTo])
  @@index([isActive])
  @@map("tax_rates")
}

model TaxCategoryMapping {
  id            String         @id @default(cuid())
  variantId     String
  taxCategoryId String
  glAccountId   String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  glAccount     ChartOfAccount @relation(fields: [glAccountId], references: [id])
  taxCategory   TaxCategory    @relation(fields: [taxCategoryId], references: [id])
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, taxCategoryId])
  @@index([variantId])
  @@index([taxCategoryId])
  @@index([glAccountId])
  @@index([isActive])
  @@map("tax_category_mappings")
}

model Price {
  id            String         @id @default(cuid())
  variantId     String
  amount        Float
  currency      String         @default("USD")
  type          String         @default("retail")
  effectiveFrom DateTime       @default(now())
  effectiveTo   DateTime?
  isActive      Boolean        @default(true)
  version       Int            @default(1)
  createdBy     String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
  @@index([type])
  @@index([effectiveFrom, effectiveTo])
  @@index([isActive])
  @@index([currency])
  @@map("prices")
}

model Cost {
  id            String         @id @default(cuid())
  variantId     String
  amount        Float
  currency      String         @default("USD")
  type          String         @default("standard")
  effectiveFrom DateTime       @default(now())
  effectiveTo   DateTime?
  isActive      Boolean        @default(true)
  notes         String?
  createdBy     String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
  @@index([type])
  @@index([effectiveFrom, effectiveTo])
  @@index([isActive])
  @@index([currency])
  @@map("costs")
}

model ProductReview {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  rating      Int      @db.SmallInt
  title       String?
  content     String
  isApproved  Boolean  @default(false)
  isActive    Boolean  @default(true)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderator   User?   @relation("ReviewModeration", fields: [approvedBy], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([isApproved])
  @@index([isActive])
  @@index([rating])
  @@map("product_reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlist_items")
}

// Cart System Models
model Cart {
  id           String      @id @default(cuid())
  userId       String?     // null for guest carts
  sessionId    String?     // for guest carts
  currency     String      @default("USD")
  status       CartStatus  @default(ACTIVE)
  metadata     Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        CartItem[]
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
  @@index([status])
  @@index([currency])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@index([cartId])
  @@index([variantId])
  @@map("cart_items")
}

model ShippingZone {
  id          String   @id @default(cuid())
  name        String
  description String?
  countries   String[] // ISO country codes
  postalCodes String[] // regex patterns for postal codes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  methods     ShippingMethod[]

  @@index([isActive])
  @@index([countries])
  @@map("shipping_zones")
}

model ShippingMethod {
  id            String       @id @default(cuid())
  zoneId        String
  name          String
  description   String?
  price         Float
  currency      String       @default("USD")
  minOrderValue Float?
  maxOrderValue Float?
  deliveryTime  String?      // e.g., "3-5 business days"
  isActive      Boolean      @default(true)
  sortOrder     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  zone          ShippingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("shipping_methods")
}

enum Role {
  CUSTOMER
  ADMIN
  MODERATOR
  SUPPORT
}

enum CartStatus {
  ACTIVE
  CONVERTED
  ABANDONED
  EXPIRED
}
