generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique @db.Citext
  password                String
  name                    String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  isVerified              Boolean              @default(false)
  twoFactorEnabled        Boolean              @default(false)
  recoveryEmail           String?              @db.Citext
  notificationPreferences Json?
  preferences             Json?
  roles                   Role[]               @default([CUSTOMER])
  backupCodes             BackupCode[]
  loyaltyAccounts         LoyaltyAccount?
  notifications           Notification[]
  oneTimeTokens           OneTimeToken[]
  pendingEmailChanges     PendingEmailChange[]
  recoveryStaging         RecoveryStaging?
  refreshSessions         RefreshSession[]
  twoFactorSecret         TwoFactorSecret?
  userSessions            UserSession[]

  @@map("users")
}

model OneTimeToken {
  id        String    @id @default(cuid())
  purpose   String
  hash      String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([purpose, hash])
  @@index([expiresAt])
  @@map("one_time_tokens")
}

model RefreshSession {
  id          String   @id @default(cuid())
  familyId    String
  tokenId     String   @unique
  refreshHash String
  userId      String
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([familyId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("refresh_sessions")
}

model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_secrets")
}

model BackupCode {
  id        String    @id @default(cuid())
  userId    String
  codeHash  String
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isUsed])
  @@map("backup_codes")
}

model RecoveryStaging {
  id                String   @id @default(cuid())
  userId            String   @unique
  newEmail          String   @db.Citext
  recoveryTokenHash String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("recovery_staging")
}

model PendingEmailChange {
  id              String   @id @default(cuid())
  userId          String
  newEmail        String   @db.Citext
  changeTokenHash String
  expiresAt       DateTime
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([changeTokenHash])
  @@map("pending_email_changes")
}

model UserSession {
  id                String   @id @default(cuid())
  userId            String
  refreshTokenId    String   @unique
  deviceFingerprint String?
  userAgent         String?
  ipAddress         String?
  location          String?
  deviceType        String?
  browser           String?
  os                String?
  isCurrent         Boolean  @default(false)
  lastActiveAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isCurrent])
  @@index([userId, lastActiveAt])
  @@index([refreshTokenId])
  @@map("user_sessions")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  priority  String    @default("normal")
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([userId, type, createdAt])
  @@index([expiresAt])
  @@map("notifications")
}

model LoyaltyTier {
  id              String           @id @default(cuid())
  name            String           @unique
  minPoints       Int              @unique
  maxPoints       Int?
  benefits        Json?
  color           String?
  icon            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  loyaltyAccounts LoyaltyAccount[]

  @@index([minPoints])
  @@map("loyalty_tiers")
}

model LoyaltyAccount {
  id             String               @id @default(cuid())
  userId         String               @unique
  currentTierId  String
  currentPoints  Int                  @default(0)
  lifetimePoints Int                  @default(0)
  tierUpgradedAt DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  currentTier    LoyaltyTier          @relation(fields: [currentTierId], references: [id])
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   LoyaltyTransaction[]

  @@index([currentPoints])
  @@index([currentTierId])
  @@map("loyalty_accounts")
}

model LoyaltyTransaction {
  id               String         @id @default(cuid())
  loyaltyAccountId String
  type             String
  points           Int
  description      String
  metadata         Json?
  orderId          String?
  expiresAt        DateTime?
  createdAt        DateTime       @default(now())
  loyaltyAccount   LoyaltyAccount @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)

  @@index([loyaltyAccountId, createdAt])
  @@index([type, createdAt])
  @@index([expiresAt])
  @@map("loyalty_transactions")
}

model EmailLog {
  id        String   @id @default(cuid())
  email     String   @db.Citext
  type      String
  status    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([email, createdAt])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@map("email_logs")
}

enum Role {
  CUSTOMER
  ADMIN
  MODERATOR
  SUPPORT
}
