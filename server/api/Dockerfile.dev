# =============================================================================
# Development Dockerfile for Safawinet API
# =============================================================================
# This Dockerfile is optimized for development with hot reloading and debugging
# capabilities. It includes all development dependencies and tools.
# =============================================================================

# Base image with Node.js 20 on Alpine Linux for smaller image size
FROM node:20-alpine

# =============================================================================
# System Dependencies
# =============================================================================
# Install system packages required for development tools and scripts
RUN apk add --no-cache \
    bash \
    curl \
    netcat-openbsd \
    && rm -rf /var/cache/apk/*

# =============================================================================
# Working Directory
# =============================================================================
WORKDIR /app

# =============================================================================
# Node.js and npm Configuration
# =============================================================================
# Configure npm for better network reliability and performance
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set audit false && \
    npm config set fund false

# =============================================================================
# Dependencies Installation
# =============================================================================
# Copy package files first for better Docker layer caching
# This allows Docker to reuse the dependency layer when only source code changes
COPY package*.json ./
COPY prisma ./prisma/

# Install all dependencies (including dev dependencies for development)
# Use npm install with legacy peer deps to handle OpenTelemetry conflicts
RUN npm install --legacy-peer-deps --no-audit --no-fund --maxsockets 1 --timeout 300000 || \
    (npm cache clean --force && npm install --legacy-peer-deps --no-audit --no-fund --maxsockets 1)

# Generate Prisma client after dependencies are installed
RUN npx prisma generate

# =============================================================================
# Application Code
# =============================================================================
# Copy source code and templates
# This is done after dependencies to maximize layer caching
COPY . .

# Make startup script executable and ensure it exists
RUN chmod +x startup.sh && \
    ls -la startup.sh

# =============================================================================
# Environment Configuration
# =============================================================================
# Set environment variables for development
ENV NODE_ENV=development
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV PRISMA_CLIENT_ENGINE_TYPE="dataproxy"

# =============================================================================
# Network Configuration
# =============================================================================
# Expose the application port
EXPOSE 3000

# =============================================================================
# Health Check
# =============================================================================
# Add health check for container monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# =============================================================================
# Application Startup
# =============================================================================
# Use npm script directly instead of startup script
CMD ["npm", "run", "start:with-db"]
