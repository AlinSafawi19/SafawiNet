name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: safawinet-api
  ECS_CLUSTER: safawinet-prod
  ECS_SERVICE: safawinet-api-prod
  ECS_TASK_DEFINITION: safawinet-api-prod

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safawinet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/api/package-lock.json
    
    - name: Install dependencies
      working-directory: server/api
      run: npm ci
    
    - name: Run linting
      working-directory: server/api
      run: npm run lint
    
    - name: Run tests
      working-directory: server/api
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/safawinet_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Run e2e tests
      working-directory: server/api
      run: npm run test:e2e
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/safawinet_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      working-directory: server/api
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:prod .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v2
      with:
        task-definition: task-definition.json
        container-name: safawinet-api
        image: ${{ needs.build-and-push.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Run database migration
      run: |
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
          --overrides '{"containerOverrides":[{"name":"safawinet-api","command":["npx","prisma","migrate","deploy"]}]}'
    
    - name: Wait for migration to complete
      run: |
        echo "Waiting for database migration to complete..."
        sleep 30
    
    - name: Update ECS service with rolling deployment
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100"
    
    - name: Wait for deployment to stabilize
      run: |
        echo "Waiting for deployment to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Wait for health checks to pass
      run: |
        echo "Waiting for health checks to pass..."
        sleep 60
        
        # Check if the service is healthy
        HEALTH_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments[0].healthStatus' \
          --output text)
        
        if [ "$HEALTH_STATUS" != "HEALTHY" ]; then
          echo "‚ùå Service health check failed: $HEALTH_STATUS"
          exit 1
        fi
        
        echo "‚úÖ Service health check passed"
    
    - name: Test API endpoints
      run: |
        echo "Testing API endpoints..."
        
        # Test health endpoint
        HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.safawinet.com/health)
        if [ "$HEALTH_RESPONSE" != "200" ]; then
          echo "‚ùå Health endpoint failed: $HEALTH_RESPONSE"
          exit 1
        fi
        
        # Test docs endpoint
        DOCS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.safawinet.com/docs)
        if [ "$DOCS_RESPONSE" != "200" ]; then
          echo "‚ùå Docs endpoint failed: $DOCS_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ API endpoints are responding correctly"

  notify:
    needs: [health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.health-check.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful!"
          echo "üåê API URL: https://api.safawinet.com"
          echo "üìö Docs: https://api.safawinet.com/docs"
          echo "üìä Monitoring: https://console.aws.amazon.com/cloudwatch/home"
        else
          echo "‚ùå Production deployment failed!"
          echo "üîç Check CloudWatch logs for details"
          exit 1
        fi
